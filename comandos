
================================================================================
üì¶ COMANDOS SYMFONY USADOS EN EL TUTORIAL JOBEET (hasta el D√≠a 12)
Con ejemplos pr√°cticos (uso real con par√°metros y argumentos espec√≠ficos)
================================================================================

üéØ CREAR APLICACIONES
----------------------

php symfony generate:app frontend
// Crea la aplicaci√≥n p√∫blica para usuarios.

php symfony generate:app backend
// Crea la aplicaci√≥n privada para administraci√≥n.

üõ†Ô∏è CONFIGURAR BASE DE DATOS
----------------------------
con postgress

php symfony configure:database "pgsql:host=localhost;dbname=jobeet" postgres 123

üîß CONSTRUCCI√ìN DEL MODELO Y LA BASE DE DATOS
---------------------------------------------

// Genera las clases PHP del modelo a partir del archivo schema.yml.
- php symfony doctrine:build --model

// Genera los archivos SQL necesarios para crear las tablas.
- php symfony doctrine:build --sql

// Inserta el SQL generado anteriormente y crea las tablas en la base de datos.
- php symfony doctrine:insert-sql

// Carga datos de prueba definidos en data/fixtures.
- php symfony doctrine:data-load

//Recargar la base de datos contruyendola de 0
php symfony doctrine:build --all --and-load --no-confirmation


‚öôÔ∏è GENERACI√ìN DE CRUD Y ADMIN
-----------------------------

// Genera CRUD (create-read-update-delete) en el m√≥dulo "job" para el modelo JobeetJob.
- php symfony doctrine:generate-module frontend job JobeetJob

// Genera una interfaz de administraci√≥n para JobeetJob en la app backend.
- php symfony doctrine:generate-admin backend JobeetJob --module=job

// Genera la interfaz admin para las categor√≠as. 
- php symfony doctrine:generate-admin backend JobeetCategory --module=category

üß™ PRUEBAS FUNCIONALES
-----------------------

php symfony test:all
// Ejecuta todas las pruebas funcionales y unitarias.

php symfony test:functional frontend nombreArchivo (php symfony test:functional frontend apiActions)
// ejectuar test del frontend

üßπ LIMPIAR CACH√â
-----------------

php symfony cc
// Limpia todos los archivos de cach√© del proyecto.

üÜò AYUDA Y DOCUMENTACI√ìN
-------------------------

php symfony list
// Muestra todas las tareas disponibles.

php symfony help doctrine:generate-admin
// Muestra c√≥mo se usa la tarea doctrine:generate-admin, sus opciones y argumentos.

php symfony help doctrine:generate-module
// Ayuda detallada para generar m√≥dulos Doctrine.

php symfony help doctrine:build
// Ayuda sobre c√≥mo generar modelo y SQL.

 PLUGINS
-------------------------
php symfony plugin:install sfDoctrineGuardPlugin
//Instala sfDoctrineGuardPlugin para garantizar acceso al backend

php symfony guard:create-user --is-super-admin fabien@example.com fabien SecretPass
//Crear un super usuario

===================================================================w=============



executeIndex()	La acci√≥n de la vista list
executeFilter()	Actualiza los filtros
executeNew()	La acci√≥n de la vista new
executeCreate()	Crea un nuevo Job
executeEdit()	La acci√≥n de la vista edit
executeUpdate()	Actualiza un Job
executeDelete()	Borra un Job
executeBatch()	Ejecuta una acci√≥n por lote
executeBatchDelete()	Ejecuta la acci√≥n por lote _delete
processForm()	Procesa el formualrio Job
getFilters()	Devuelve los filtros actuales
setFilters()	Establece los filtros
getPager()	Devuelve el paginador de la lista
getPage()	Obtiene la p√°gina de la lista
setPage()	Establece la p√°gina de la lista
buildCriteria()	Construye el Criteria para la lista
addSortCriteria()	agrega un Criteria ordenado para la lista
getSort()	Devuelve la columna utilizada para ordenar
setSort()	Establece la columna utilizada para ordenar


---------------------------------------------

HELPERS Y FORMULARIOS DEL I18N (internacionalizacion)

https://symfony.com/legacy/doc/jobeet/1_4/es/19?orm=Doctrine
  
ALfinal del documento esta todo eso